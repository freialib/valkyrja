var c = require('chalk');
var fs = require('fs');
var toml = require('toml');
var file_exists = require('is-there');
var _ = {
	merge: require('lodash.merge'),
	clone: require('lodash.clone'),
	each: require('lodash.foreach')
};
// ----------------------------------------------------------------------------

module.exports = function readconf(cwd, basename) {
	var mainfile = cwd + '/' + basename + '.toml';
	var userfile = cwd + '/' + basename + '.user.toml';

	var conf, userconf = {};

	if (file_exists(userfile)) {
		userconf = toml.parse(fs.readFileSync(userfile, 'utf8'));
	}

	if (file_exists(mainfile)) {

		defaultConf = {
			autogroup: true,
			servers: {
				defaults: {}
			},
			postdeploy: {
				defaults: []
			},
			rsync: {
				include: [],
				exclude: [],
				patterns: []
			},
			ssh: {
				'stop-on-errors': false,
				timeout: 600000
			}
		};

		conf = _.merge(defaultConf, toml.parse(fs.readFileSync(mainfile, 'utf8')), userconf);

		// integrate defaults
		var serverDefaults = _.clone(conf.servers.defaults);
		var postdeployDefaults = _.clone(conf.postdeploy.defaults);
		delete conf.servers.defaults;
		delete conf.postdeploy.defaults;

		_.each(conf.servers, function (hosts, category) {
			_.each(hosts, function (server, i) {
				conf.servers[category][i] = _.merge({}, serverDefaults, server);
			});
		});

		_.each(conf.servers, function (hosts, category) {
			var completeCmds = _.clone(postdeployDefaults);
			if (conf.postdeploy[category]) {
				_.each(conf.postdeploy[category], function (cmd) {
					completeCmds.push(cmd);
				})
			}

			conf.postdeploy[category] = completeCmds;
		});
	}
	else { // missing main conf file
		console.log(c.red('valkyrja') + ': missing required file ' + c.gray(mainfile));
		console.log(c.red('valkyrja') + ': you can create the file using ' + c.magenta('valk make'));
		process.exit(500);
	}

	return conf;
}
