var Promise = require('lie');
var makeRsync = require('lib/rsync');
var makeSSH = require('lib/ssh');
var c = require('chalk');
var _ = {
	each: require('lodash.foreach'),
	merge: require('lodash.merge')
};
// ----------------------------------------------------------------------------

// signal handler function
var rsyncPid;
var quitting = function() {
	if (rsyncPid) {
		rsyncPid.kill();
	}
	process.exit();
}

module.exports = function rsyncEach (cwd, conf, category, tools, configure, opts) {

	var defaultOpts = {
		simple: false,
		printcmd: false,
		check: true,
		build: true
	};

	if (opts == null) {
		opts = defaultOpts;
	}
	else { // got options
		opts = _.merge({}, defaultOpts, opts);
	}

	return new Promise(function (done, failed) {

		var tasks = [];
		var nextTask = function () {
			if (tasks.length > 0) {
				var task = tasks.shift();
				task().then(nextTask, failed);
			}
			else { // finished
				done();
			}
		}

		var hosts = conf.servers[category];

		_.each(hosts, function (host) {
			tasks.push(function () {
				return new Promise(function (resolve, reject) {

					if (opts.simple) {
						console.log('');
						console.log(' ░ ' + c.cyan.dim.underline.bold(host.title));
						console.log('');
					}
					else { // not so simple
						console.log('');
						console.log(' ░ ' + c.cyan.dim.underline.bold(host.title));
						console.log(' ░ host  = ' + c.magenta(host.host));
						console.log(' ░ path  = ' + c.magenta(host.path));
						console.log(' ░ group = ' + c.magenta(host.group));

						if ((opts.build  && host['build']) || (opts.check && host['check'])) {
							console.log('');
						}
					}

					var rsync = makeRsync(conf);
					var ssh = makeSSH(conf, host);

					rsync.destination(host.username + '@' + host.host + ':' + host.path);
					rsync.source(cwd + '/');

					if (configure) {
						configure(rsync, ssh, host);
					}

					var buildstep;
					if (opts.build && host['build']) {
						buildstep = tools.build(cwd, args, conf, host.build, category, host);

						if (buildstep === true) {
							buildstep = Promise.resolve();
						}

						buildstep.then(function () {
							console.log(c.blue('build complete'));
						}, function (reason) {
							console.log(c.dim.red('build failed'));
							console.log('');
							if (reason.stack) {
								console.log(reason.stack);
							}
							else { // unknown type
								console.log(reason)
							}
						});
					}
					else { // no build step for host
						buildstep = Promise.resolve();
					}

					buildstep.then(function () {
						var checkstep;
						if (opts.check && host['check']) {
							checkstep = tools.check(host.check, category, host);

							if (checkstep === true) {
								checkstep = Promise.resolve();
							}

							checkstep.then(function () {
								console.log(c.blue('check complete'));
							}, function (reason) {
								console.log(c.dim.red('check failed'));
								console.log('');
								if (reason != null) {
									if (reason.stack) {
										console.log(reason.stack);
										console.log('')
									}
									else { // unknown type
										console.log(reason)
										console.log('')
									}
								}
							});
						}
						else { // no check step for host
							checkstep = Promise.resolve();
						}

						checkstep.then(function () {

							if (opts.build || opts.check) {
								console.log('');
							}

							if (opts.printcmd) {
								console.log(c.dim(rsync.command()));
								console.log('');
							}

							process.on("SIGINT", quitting); // run signal handler on CTRL-C
							process.on("SIGTERM", quitting); // run signal handler on SIGTERM
							process.on("exit", quitting); // run signal handler when main process exits

							rsyncPid = rsync.execute(function (error, code, cmd) {
								try {
									if (ssh.isEnabled()) {
										console.log('');
									}

									if (conf.autogroup && host.group) {
										ssh.addcmd('chgrp -v -R -P ' + host.group + ' . | grep -v -s "retained as '+host.group+'$" | cat');
									}

									if (conf.postdeploy[category]) {
										_.each(conf.postdeploy[category], function (cmd) {
											ssh.addcmd(cmd);
										})
									}

									ssh.exec().then(function () {
										if ( ! opts.simple) {
											console.log(c.blue('host sync complete'));
											console.log(c.dim('▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄'));
											console.log('');
										}

										// all done
										resolve();

									}, function (reason) {
										console.log(c.red.dim('host sync failed'));
										console.log(c.dim('▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄'));
										console.log('');

										// failed
										reject(reason);
									});
								}
								catch (e) {
									reject(e);
								}
							}, function (data) {
								process.stdout.write(data.toString());
							}, function (data) {
								process.stdout.write(data.toString());
							});
						})
					})
				})
			})
		});

		// begin iteration
		nextTask();
	});
}
