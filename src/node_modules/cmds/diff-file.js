var Promise = require('lie');
var readconf = require('lib/readconf');
var exec = require('child_process').exec;
var tmp = require('tmp');
var fs = require('fs');
var c = require('chalk');
var _ = { each: require('lodash.foreach') };
// ----------------------------------------------------------------------------

var diffRemoteFile = function (host, category, sshCmd, diffCmd) {
	return new Promise(function (resolve, reject) {
		console.log('');
		console.log(' ░ ' + c.cyan.dim.underline.bold(host.title));
		console.log(' ░ ' + c.gray(category));
		console.log('')
		tmp.file(function (err, filepath, fd, cleanup) {
			if ( ! err) {
				var ssh = exec(sshCmd, function (err, data) {

					if (/No such file or directory/.test(''+err)) {
						err = null;
						data = '';
					}

					if ( ! err) {
						fs.writeFileSync(filepath, data, 'utf8');
						var diff = exec(diffCmd.replace('<<filepath>>', filepath), function (err, data) {
							if ( ! err) {
								if (('' + data).length != 0) {
									console.log(data);
								}
								else {
									console.log(' ' + c.blue.dim('no difference'));
									console.log('');
								}

								cleanup();
								resolve();
							}
							else { // failed diff
								cleanup();
								console.log(c.red.dim('failed to execute diff command'));
								reject(err);
							}
						});
					}
					else { // failed ssh
						cleanup();
						console.log(c.red.dim('failed to execute ssh command'));
						reject(err);
					}
				});
			}
			else { // failed temp
				console.log(c.red.dim('failed to crete temp file; diff failed'));
				reject(err);
			}
		});
	});
};

module.exports = function (cwd, args, draftdir) {
	var conf = readconf(cwd, '.valkyrja');

	if (args.length == 0) {
		console.log(c.red('valkyrja') + ': you must specify a file to diff');
		return;
	}

	var filepath = args.shift();

	var targetCategory = false;
	if (args.length > 0) {
		targetCategory = args.shift();
	}

	var alldiffs = new Promise(function (done, failed) {
		var tasks = [];
		var nextTask = function () {
			if (tasks.length > 0) {
				var task = tasks.shift();
				task().then(nextTask, failed);
			}
			else { // finished
				done();
			}
		}

		_.each(conf.servers, function (hosts, category) {
			if ( ! targetCategory || targetCategory == category) {
				_.each(hosts, function (host) {
					tasks.push(function () {
						return diffRemoteFile (
							host, category,
							"ssh "+host.username+"@"+host.host+" 'cat "+host.path.replace(/\/$/, '')+"/"+filepath+"'",
							"diff '<<filepath>>' '"+filepath+"' | cat"
						);
					})
				});
			}
		});

		nextTask();
	});

	alldiffs.then(function () {
		console.log(c.blue('diff complete'));
		console.log('');
	}, function (reason) {
		if (reason) {
			if (reason.stack) {
				console.log('')
				console.log(reason.stack);
			}
			else { // non stack error
				console.log(reason);
			}
		}

		console.log('');
		console.log(c.red.dim('diff failed'));
		console.log('');

		return Promise.reject();
	})
}
